name: API

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  GH_TOKEN: ${{ github.token }}

jobs:
  test_linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose -- --test-threads=1

  test_windows:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose -- --test-threads=1

  check_release:
    needs: [test_linux, test_windows]
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    outputs:
      RELEASE_VERSION: ${{ steps.extract_version.outputs.app_version }}
      RELEASE_EXISTS: ${{ steps.check_release.outputs.release_exists }}

    steps:
    - uses: actions/checkout@v3

    - name: Extract Version
      id: extract_version
      uses: dante-signal31/rust-app-version@v1.2.0
      with:
         cargo_toml_folder: ./

    - name: Check Release Existence
      id: check_release
      run: |
        release_version="v${{ steps.extract_version.outputs.app_version }}"
        if gh release view "$release_version" >/dev/null 2>&1; then
          echo "::set-output name=release_exists::true"
        else
          echo "::set-output name=release_exists::false"
        fi

  create_release:
    needs: check_release
    runs-on: ubuntu-latest
    if: needs.check_release.outputs.RELEASE_EXISTS != 'true'

    outputs:
      RELEASE_ID: ${{ steps.get_release_id.outputs.id }}
      RELEASE_VERSION: ${{ needs.check_release.outputs.RELEASE_VERSION }}

    steps:
    - uses: actions/checkout@v3


    - name: Create Release
      id: create_release
      run: gh release create "v${{ needs.check_release.outputs.RELEASE_VERSION }}" -t "v${{ needs.check_release.outputs.RELEASE_VERSION }}" -n "v${{ needs.check_release.outputs.RELEASE_VERSION }}"

    
    - name: Get release ID
      id: get_release_id
      uses: joutvhu/get-release@v1
      with:
        tag_name: "v${{ needs.check_release.outputs.RELEASE_VERSION }}"
      env:
        GITHUB_TOKEN: ${{ github.token }}

  package_and_upload_linux:
    needs: create_release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: build
        run: ./build-linux.sh

      - name: package
        run: cd build; zip -r ../palantir-media-server-v${{ needs.create_release.outputs.RELEASE_VERSION }}-linux.zip *; cd ..

      - name: upload
        run: gh release upload v${{ needs.create_release.outputs.RELEASE_VERSION }} palantir-media-server-v${{ needs.create_release.outputs.RELEASE_VERSION }}-linux.zip

  package_and_upload_windows:
    needs: create_release
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: build
        run: .\build-windows.ps1

      - name: package
        run: Compress-Archive -Path .\build -DestinationPath .\palantir-media-server-v${{ needs.create_release.outputs.RELEASE_VERSION }}-win64.zip 

      - name: upload
        run: gh release upload v${{ needs.create_release.outputs.RELEASE_VERSION }} palantir-media-server-v${{ needs.create_release.outputs.RELEASE_VERSION }}-win64.zip

  delete_release:
    if: failure()
    needs: [create_release, package_and_upload_linux, package_and_upload_windows]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Delete Release
        run: gh release delete "v${{ needs.create_release.outputs.RELEASE_VERSION }}" -y